The kill command enables us to kill a process without logging out or restarting the computer.
Each process (also called task sometimes) on Linux  have its own unique process identification number (PID).
The PID is assigned to the process as soon as it is created.

kill [options or signals] [...]

The kill command in its simplest for can be as follows:

kill 1565
Where 1565 in the above command is the PID of the process.

To print all the processes and their corresponding PID, run the following command:
ps -A

If you know the process name you can get its PID using the grep on ps command.

For example you want to know the PID of process whose name is psql the following command will give you the PID of the psql.

Shell
$ ps aux | grep psql

Use pidof command to find the PID of process
pidof psql

The following command can be use to kill process based upon PID

kill -9 1656

or

kill -SIGTERM 1656

where pid=1656.
-9 flag in the above command is SIGKILL.
The default signal for kill is SIGTERM.

To kill more then one processes use the following commandwhere pid=1656.
-9 flag in the above command is SIGKILL.
The default signal for kill is SIGTERM.

To kill more then one processes use the following command
To list all the signal names with their corresponding number use following command

kill -l
killall cammand can be used to kill processes by their name.

TO CHANGE PERMISSION
chmod

add executable permision
chmod +x filename
remove write permission
chmod -w filename


Understanding Angle Brackets in Bash

use brackets to push data from place to place, for example, to a file:
ls > dir_content.txt
In this example, instead of showing the contents of the directory on the command
line, > tells the shell to copy it into a file called dir_content.txt. If dir_content.txt
doesnâ€™t exist, Bash will create it for you, but if dir_content.txt already exists 
and is not empty, you will overwrite whatever it contained, so be careful!

You can avoid overwriting existing content by tacking the new stuff onto the end of the old stuff. For that you use >> (instead of >):

ls $HOME > dir_content.txt; wc -l dir_content.txt >> dir_content.txt
This line stores the list of contents of your home directory into dir_content.txt. You then count the number of lines in dir_content.txt (which gives you the number of items in the directory) with wc -l and you tack that value onto the end of the file.



